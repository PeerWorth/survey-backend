name: Deploy to Elastic Beanstalk

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Bump version from latest tag (supports #major #minor)
      id: versioning
      run: |
        git fetch --tags

        # ÏµúÏã† ÌÉúÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        VERSION=${LATEST_TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

        # ÏµúÏã† Ïª§Î∞ã Î©îÏãúÏßÄ ÌôïÏù∏
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "üîç Latest commit message: $COMMIT_MSG"

        # Ï¶ùÍ∞Ä ÌÉÄÏûÖ ÌåêÎ≥Ñ
        if [[ "$COMMIT_MSG" == *"#major"* ]]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
          INCREMENT_TYPE="major"
        elif [[ "$COMMIT_MSG" == *"#minor"* ]]; then
          MINOR=$((MINOR + 1))
          PATCH=0
          INCREMENT_TYPE="minor"
        else
          PATCH=$((PATCH + 1))
          INCREMENT_TYPE="patch"
        fi

        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "üéØ Bumping $INCREMENT_TYPE version: $LATEST_TAG ‚Üí $NEW_VERSION"

        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "new_tag=$NEW_VERSION" >> $GITHUB_OUTPUT

        # Git ÌÉúÍ∑∏ Ïª§Î∞ã
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag $NEW_VERSION
        git push origin $NEW_VERSION


    - name: Save .env
      run: echo "${{ secrets.BACKEND_ENV_CONTENTS }}" > .env

    - name: Change files for production
      run: cp docker-compose.prod.yml docker-compose.yml

    - name: Zip Application
      run: zip -r app.zip . -x ".git/*" ".github/*"

    - name: Upload to S3
      run: |
        aws s3 cp app.zip s3://${{ secrets.EB_BUCKET }}/app-${{ env.NEW_VERSION }}.zip

    - name: Create new Elastic Beanstalk Application Version
      run: |
        aws elasticbeanstalk create-application-version \
          --application-name ${{ secrets.EB_APPLICATION_NAME }} \
          --version-label ${{ env.NEW_VERSION }} \
          --source-bundle S3Bucket=${{ secrets.EB_BUCKET }},S3Key=app-${{ env.NEW_VERSION }}.zip

    - name: Wait for EB environment to be Ready
      run: |
        echo "‚è≥ Waiting for environment to become Ready..."
        while [ "$(aws elasticbeanstalk describe-environments \
                        --environment-names ${{ secrets.EB_ENV_NAME }} \
                        --query "Environments[0].Status" \
                        --output text)" != "Ready" ]; do
          echo "   Current status: $(aws elasticbeanstalk describe-environments \
                                  --environment-names ${{ secrets.EB_ENV_NAME }} \
                                  --query "Environments[0].Status" \
                                  --output text). Sleeping 15s..."
          sleep 15
        done

    - name: Deploy to Elastic Beanstalk
      run: |
        aws elasticbeanstalk update-environment \
          --environment-name ${{ secrets.EB_ENV_NAME }} \
          --version-label ${{ env.NEW_VERSION }}
